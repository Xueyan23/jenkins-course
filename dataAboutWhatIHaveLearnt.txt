STEPS TO INSTALL JENKINS GIVEN IN VIDEO 4 of folder 2) Introduction to jenkins
step 1- Open terminal and write following command
cd /var/www/html
mkdir jenkinsCourse
cd jenkinsCourse
git clone https://github.com/Xueyan23/jenkins-course.git
cd jenkins-course/master/scripts
sudo bash install_jenkins.sh


THIS WILL INSTALL DOCKER AND THEN JENKINS

we install jenkins by running jenkins official container

Step 2 -Now you get the port where jenkins is served BUT tou will open jenkins using url->localhost:8080
Visit the url of jenkins in frontend
you will get a path or directory from where you can get initial admin password
In terminal 
cat /var/jenkins_home/secrets/initialAdminPassword ->This will give password for initial jenkins authentication


EXPLAINATION OF bash commands inside install_jenkins.sh

you can check its details by running->$ cat install_jenkins.sh // When you are in scripts directory


#!/bin/bash

# this script is only tested on ubuntu xenial

# install docker
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
apt-get update
apt-get install docker-ce docker-ce-cli containerd.io
systemctl enable docker
systemctl start docker
usermod -aG docker ubuntu # agar tumhare paas ubuntu user hai jaise iss instance mein ubuntu user hai toh ye docker ko iss ubuntu group mein add krdega Pr agar aap root hai then you can use docker right away but in linux it's NOT RECOMMENDED not to do things as root So, it's better to use a user

# run jenkins
mkdir -p /var/jenkins_home # this will create directory
chown -R 1000:1000 /var/jenkins_home/ #This will change ownership of this jenkins_home directory And 1000:1000 left wala 1000 will be the id under which our jenkins will be running
docker run -p 8080:8080 -p 50000:50000 -v /var/jenkins_home:/var/jenkins_home -d --name jenkins jenkins/jenkins:lts #Container name - jenkins/jenkins:lts ; This command will start the container which is the official jenkins container that docker will download ;make sure port is exposed  This command -> -v /var/jenkins_home:/var/jenkins_home says that if you are using this container then this /var/jenkins_home will be mapped to /var/jenkins_home directory that you have created 

# show endpoint
echo 'Jenkins installed'
echo 'You should now be able to access jenkins at: http://'$(curl -s ifconfig.co)':8080'

COMMAND TO CHECK ALL THE DOCKER IMAGES 
$sudo docker ps -a

Now if you want to know what I have Done in Tutorial Number Folder 3 video number 3 and 4 refer BuildingFirstDockerApplicationUsingJenkinsUI.txt file inside docker-demo git repository

TUTORIAL Folder-5 Jenkins To DSL Demos for building jenkins job using DSL 

1) Go To Jenkins dashboard->manage plugins->Available plugins->Search Job DSL and install it
2)Create new project name seed project of  Fresstyle type
3)Source Code Management->Now enter the url for jenkins-course repository
4)In Build section->Select Process Job DSLs->Look on Filesystem
5)Inside DSL Scripts-> job-dsl/nodejs.groovy is the refernce or file location wher DSL code script is written in git repository
6)SAVE
7)Run Build for first time will fail because the script needs approval for use
8)GO to manage jenkins->In-process Script Approval
9)Approve the incoming script to tell the jenkins that you trust the incoming script from given repository
10)Now Build the seed project again Its SUCCESS
11)Now run the new build project
12)Now go to ssh your digital ocan machine and get access to it
13)Now check if it working or not
14)docker ps
@)docker exec -it <container Id of jenkins-docker> bash #-it means injective mode
Entered the jenkins-docker container
@)cd /var/jenkins_home/workspace/NodeJS example without docker using DSL groovy scripting
@)ls -ahl
You will see everything is installed 
@)npm start
Command not found
@) find ~ -name 'npm'
@) export PATH=$PATH:/var/jenkins_home/tools/jenkins.plugins.nodejs.tools.NodeJSInstallation/nodejs/bin #Now whenever we do ls, npm or bash they will also look in this path as well as the regular path a little hack to see if our application is running 
@)npm start



TUTORIAL Folder-5 Jenkins To DSL Demos for building jenkins job using DSL and publish in Docker
1)GO to Jenkins Dashboard->Got to already created seed project and configure it
2)Source Code Management->Now enter the url for jenkins-course repository
3)In Build section->Select Process Job DSLs->Look on Filesystem
4)Inside DSL Scripts-> job-dsl/nodejsdocker.groovy is the refernce or file location wher DSL code script is written in git repository this should be added as second line 
5)Save
6)Run on first build will fail as DSL script needs approval
7)GO to manage jenkins->In-process Script Approval
8)Approve the incoming script to tell the jenkins that you trust the incoming script from given repository
9)Now Build the project again And it Success And the project is also published in docker

Explaination of GROOVY CODE

job('NodeJS Docker using DSL groovy scripting') { #This will create another job in jenkins with name as given inside parenthesis
    scm {
        git('git://github.com/Xueyan23/docker-demo.git') {  node -> // is hudson.plugins.git.GitSCM
            node / gitConfigName('DSL User')
            node / gitConfigEmail('jenkins-dsl@newtech.academy')
        }
    }
    triggers {
        scm('H/5 * * * *')
    }
    wrappers {
        nodejs('nodejs') // this is the name of the NodeJS installation in 
                         // Manage Jenkins -> Configure Tools -> NodeJS Installations -> Name
    }
    steps {
        dockerBuildAndPublish {
            repositoryName('devrath98/nodejs-docker-using-dsl-groovy-scripting')
            tag('${GIT_REVISION,length=9}') #we are going to tag the pushed docker image if we leave this empty it will be latest , but we are going to tag it with a GIT_REVISION , which is a unique id, a unique SHA that git has for every commit. So for every change you made in your git repository which is a commit you will have a unique SHA and this unique string we are going to use to tag our image, so that every image can be tracked back to the version control. So, if we then a specific version with a certain tag, we know exactly what version it is. We can go back to version Control, Type in this commit ID, and we can find the exact code that this deploys.
            registryCredentials('dockerhub') #dockerhub is the id for dockerhub credentials
#Following are some flags and their meaning is defined in website-> http://jenkinsci.github.io/job-dsl-plugin/ Her you can find the job DSL API documentation.Search docker in filter and you will see dockerBuildAndPublish
            forcePull(false) #if set to true it will mean that if set make sure you do a pull of this Node.js image to have the latest version before you start building it Can be very useful if you take for example ,on a specific major version on Node.js , you wanna make sure that you have the latest version of that major version. Like your major version is 7 so you have to make sure you have the latest version of 7 and not the older version but here false so this process does not takes place
            forceTag(false)
            createFingerprints(false)
            skipDecorate()
        }
    }
}


PIPELINE FOLDER 6 Tuts 
video 4 DEMO JENKINS pipeline with nodeJs an docker
Jenkins pipeline with nodeJS example , with docker
What is the idea of this jenkins pipeline-The idea is that we only have one repository with our project. And in this project we have the pipeline file
, often called Jenkins file.
And that Jenkins file will then have the steps, the pipeline steps to build this project in Jenkins.
So , then you only need one project , one git repository, That will have the code of your project and also the code to build your project.
So, this is what we want to build the nodeJS project with docker.

To check the code go to docker-demo repository
Inside it is the DOCKERfile 

Dockerfile code EXPLAINATION
#This is our node base image  that we want to build together with this application and then we want to start it
FROM node:12 
WORKDIR /app
ADD . /app
RUN npm install
EXPOSE 3000
CMD npm start

Typically you put the jenkinsfile in root of your project but you can also put it somewher else
FOR this purpose I have put it here in misc folder 
got to misc->open Jenkinsfile inside docer-demo repository

Following is the code of Jenkinsfile which is necessary to build our nodeJS project and that is going to package it in docker and publish it to docker hub.
JSNKINSFILE code EXPLAINATION
#we are going to have three stages
1)Preparation stage
2)Test stage
3)A stage that's called docker build and push. docker build and push can be two separate stage but we have put them together here
node {#This means this project can be built in any node
   def commit_id #We will have a variable commit_id We have to figure it out because doesn't expose it by default in jenkins pipelines. 
   stage('Preparation') { #let's go over what we are going to do in preparation stage
     checkout scm # first this command is going to do a git clone of this docker demo in jenkins. So then we have all the files available and we can start building our project  SO, now that we have the current repository available we are going to run the following command using a shell
     sh "git rev-parse --short HEAD > .git/commit-id" #This is going to give us the commit_id. and this commit_id using > sign in above command is going to put in a file  .git/commit-id . which is just a temporary file where we're going to store this commit ID. It's the SHA , it's a unique ID. WE are going to use it later on to tag our image. Just as we did earlier in previous docker build                       
     commit_id = readFile('.git/commit-id').trim() #This is going to save in this commit_id whatever is there in  .git/commit-id after reading it and trimming it for any spaces so that it's just a string characters of this commit ID.
   }
   stage('test') { #In this stage we are going to run NPM install only in the development packages. And npm test
     nodejs(nodeJSInstallationName: 'nodejs') { #To make sure that we can run NPM we're going to represent this nodeJS.So we are going to say that nodeJS installation name is nodeJS. We have a global tool in our Jenkins nodejs which is installed.Only when using this nodejs we can use the NPM commands. Otherwise it will say NPM not found
       sh 'npm install --only=dev' #install ONLY the development packages which is going to be mocha check it inside package.json. So we are going to install MOCHA first and that is what is going to be needed to test our package.
       sh 'npm test' # this will run the executable MOCHA which is then going to execute test.js script inside test folder.Inside it is an example script which will always succeed, but typically what you put here is a test that will test your code.
     }
   }
   stage('docker build/push') { #
     docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {#We want to do something in the docker with a registry-> standard registry index.docker.io refers to the dockerhub which is the host of the registry and we are login with the credentials with id dockerhub in our jenkins
       def app = docker.build("devrath98/docker-nodejs-demo-pipeline-intro-demo:${commit_id}", '.').push() #build my docker application and I want to tag it with a name my name-devrath98 and my repository->docker-nodejs-demo-pipeline-intro-demo and then the commit ID and I use "." dot because i wanna build the current path . That's where our dockerfile is.Amd after the build is done i wanna push this. It's going to build ->EXECUTE the Dockerfile in root directory of our project->which will build the docker image based on the codes written in Dockerfile, and it's gonna have image and that image is gonnathen be pushed to this registry using this credential. Then our Job is finished.
     }
   }
}

1)Go to Dashboard->manage jenkins->manage plugin->available->search docker->Docker Pipeline ->select and install
2)create new job name -> docker nodejs demo pipeline intro demo
type-> pipeline 
3)Ideally you should avoid it you should have job dsl which automatically crates it or you have another meethod which will run automatically, otherwise for every product that you have you have to  manually input it still in Jenkins UI like we will do her.If you have a lot of jobs, lot of projects, lot of repositories then automation is bnecessary.
4)Here only need one thing
5)Under Pipeline section->select Pipeline script from SCM->SCM is git->  copy the url of docker-demo repository
6)SCript path-> misc/Jenkinsfile
7)Save-> Build Now

Pipelines Folde VIDEO 6 Demo build, test, and run everything in Docker containers
JENKINS PIPELINES TEST WITH DOCKER
IN this we will see how to run a pipeline where the tests will be executed in docker container.
So remember our Jenkins image is already running in a docker container but if we run any step, it will still run on this jenkins master container and that's what we don't really want.
We want to run every command in separate isolated container that has some dependencies and binaries bundled with it.
And those dependencies And Binaries we want to choose ourselves.
So this is an alternative tousing the tools that are bundled with Kenkins like node.js is bundled so we can use the NPM commands but the alternative here isn't to use a docker container that shapes node to then execute NPM commands.
CODE WHICH CAN DO THAT->Inside docker-demo repository ->misc->Jenkinsfile.v2
EXPLAINATION OF CODE

node {  
   def commit_id
   stage('Preparation') {
     checkout scm
     sh "git rev-parse --short HEAD > .git/commit-id"
     commit_id = readFile('.git/commit-id').trim()
   }
   stage('test') {
     def myTestContainer = docker.image('node:4.6') #here we say that our test container where we run our test in is going to be a node image version 4.6 We created an image and not used plugin because sometimes the plugin does not come bundled together with all related version feature due to plugin updates so it's better to run the tests in separate isolated containers
     myTestContainer.pull() #Then I want to make sure that I pulled the latest one if there's a version cached, I want to make sure that Jenkins still goes to docker hub and checks that I have the latest version and it pulls the latest if ther's a newer version.
     myTestContainer.inside { #And inside this node 4.6 container we are going to execute following bash commands so, nodejs doesn't need to be installed in my jenkins container anymore, I can just create a new container next to my jenkins container and execute these two commands. After these commands are executed the container is just thrown away and then next stage is executed. At anypoint when I want to change my node version, i just change it  def myTestContainer = docker.image('node:4.6') here and other image will be pulled and my install and my tests will be executed using this other container with a newer version. 
       sh 'npm install --only=dev'
       sh 'npm test'
     }
   }
   stage('test with a DB') { ###Same two commands are run as previous test stage but I also want next to my node container is also NYSQL container

     def mysql = docker.image('mysql').run("-e MYSQL_ALLOW_EMPTY_PASSWORD=yes --rm") # mysql equals docker image MYSQL. I don't use a tag her as done above for node image which defaults to it will be latest version Mysql image. Then we are going to run this container and will specify an environment variable. MYSQL ALLOW EMPTY password = YES So, ther's no password protection on this MYSQL and this container can be removed --rm after it has been used
     def myTestContainer = docker.image('node:4.6') 
     myTestContainer.pull()
     myTestContainer.inside("--link ${mysql.id}:mysql") { // using linking, mysql will be available at host: mysql (hostname is mysql so that you can access it at port 3306 using mysql host), port: 3306 ##Here we pass a parameter which means link this node.js container with this MYSQL container.${mysql.id}:mysql SO these are going to use MYSQL iD and make them tis available as mysql.So we can use node to connect to mysql and put host MYSQL and then you can connect to your MYSQL whenever you are running and executing your tests. Once this stage is finished the container will be thrown away
#Same two commands are run as previous test stage but I also want next to my node container is also NYSQL container
          sh 'npm install --only=dev' 
          sh 'npm test'                     
     }                                   
     mysql.stop() #This will automatically remove mysql container so no need to use --rm
   }                                     
   stage('docker build/push') {            
     docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {
       def app = docker.build("wardviaene/docker-nodejs-demo:${commit_id}", '.').push()
     }                                     
   }                                       
}                                          
 
1)Go to jenkins dashboard->new item->name:Pipeline docker nodejs demo run different stages of pipeline in isolated different containers type:pipeline->press OK
2)Pipeline section->select Pipline script from scm->SCM:git->enter docker-demo repo github url->Script path:misc/Jenkinsfile.v2
3)Save
4)Build
5)DONE

THIS shows you how you can easily within jenkins pipeline so you can easily use any third-party tool, You can bring in any container with the tools with the dependencies and binaries that you want.
